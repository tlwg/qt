--- qtextlayout.cpp.org	2007-10-11 11:34:16.000000000 +0700
+++ qtextlayout.cpp	2007-10-11 11:41:33.000000000 +0700
@@ -651,7 +651,7 @@
             oldPos++;
 
         while (oldPos < len && !attributes[oldPos-1].whiteSpace
-               && !d->atWordSeparator(oldPos))
+               && !d->atWordSeparator(oldPos) && attributes[oldPos-1].lineBreakType != QCharAttributes::Break)
             oldPos++;
     }
 //      qDebug("  -> %d", oldPos);
@@ -679,7 +679,7 @@
             oldPos--;
 
         while (oldPos && !attributes[oldPos-1].whiteSpace
-               && !d->atWordSeparator(oldPos - 1))
+               && !d->atWordSeparator(oldPos - 1) && attributes[oldPos-1].lineBreakType != QCharAttributes::Break)
             oldPos--;
     }
 //     qDebug("  -> %d", oldPos);
--- qscriptengine.cpp.org   2007-08-07 20:08:43.000000000 +0700
+++ qscriptengine.cpp   2007-10-31 15:10:59.000000000 +0700
@@ -3474,7 +3474,7 @@
 
 
 #if defined(Q_WS_X11) || defined(Q_WS_QWS) || defined(Q_WS_MAC)
-static void thaiWordBreaks(const QChar *string, const int len, QCharAttributes *attributes)
+static void thaiWordBreaks(const QChar *string, int from, const int len, QCharAttributes *attributes)
 {
 #ifdef QT_NO_TEXTCODEC
     Q_UNUSED(string);
@@ -3482,40 +3482,48 @@
     Q_UNUSED(attributes);
 #else
     typedef int (*th_brk_def)(const char*, int[], int);
+    typedef int (*th_chlevel_def)(char);
+    typedef char (*th_uni2tis_def)(wchar_t);
     static QTextCodec *thaiCodec = QTextCodec::codecForMib(2259);
     static th_brk_def th_brk = 0;
+    static th_chlevel_def th_chlevel = 0;
+    static th_uni2tis_def th_uni2tis = 0;
 
 #ifndef QT_NO_LIBRARY
     /* load libthai dynamically */
     if (!th_brk && thaiCodec) {
-        th_brk = (th_brk_def)QLibrary::resolve(QLatin1String("thai"), "th_brk");
+        th_brk = (th_brk_def)QLibrary::resolve(QLatin1String("thai"), 0, "th_brk");
         if (!th_brk)
             thaiCodec = 0;
+        th_chlevel = (th_chlevel_def)QLibrary::resolve(QLatin1String("thai"), 0, "th_chlevel");
+        if (!th_chlevel)
+            qDebug("Can't load th_chlevel dynamic");
+        th_uni2tis = (th_uni2tis_def)QLibrary::resolve(QLatin1String("thai"), 0, "th_uni2tis");
+        if (!th_uni2tis)
+            qDebug("Can't load th_uni2tis dynamic");
     }
 #endif
 
-    if (!th_brk)
+    if (!th_brk || !th_chlevel || !th_uni2tis)
         return;
 
     QByteArray cstr = thaiCodec->fromUnicode(QString(string, len));
 
-    int brp[128];
-    int *break_positions = brp;
-    int numbreaks = th_brk(cstr.constData(), break_positions, 128);
-    if (numbreaks > 128) {
-        break_positions = new int[numbreaks];
-        numbreaks = th_brk(cstr.data(),break_positions, numbreaks);
-    }
+    int *break_positions = new int[from + len];
+    int numbreaks = th_brk(cstr.constData(), break_positions, from + len);
 
-    for (int i = 0; i < len - 1; ++i)
+    for (int i = from; i < from + len; ++i) {
+        //Set Char Stop
+        if (th_chlevel(th_uni2tis(string[i-from].unicode())) != 0)
+            attributes[i].charStop = QCharAttributes::NoBreak;
         attributes[i].lineBreakType = QCharAttributes::NoBreak;
-
+    }
     for (int i = 0; i < numbreaks; ++i) {
         if (break_positions[i] > 0)
-            attributes[break_positions[i]-1].lineBreakType = QCharAttributes::Break;
+            attributes[break_positions[i]-1+from].lineBreakType = QCharAttributes::Break;
     }
 
-    if (break_positions != brp)
+    if (break_positions != NULL)
         delete [] break_positions;
 #endif // QT_NO_TEXTCODEC
 }
@@ -3527,7 +3535,7 @@
 {
     Q_UNUSED(script);
     Q_ASSERT(script == QUnicodeTables::Thai);
-    thaiWordBreaks(text.unicode() + from, len, attributes);
+    thaiWordBreaks(text.unicode() + from, from, len, attributes);
 }
 #endif
 
--- qtextcursor.cpp.org	2007-08-07 20:08:43.000000000 +0700
+++ qtextcursor.cpp	2007-10-26 18:06:33.000000000 +0700
@@ -412,7 +412,8 @@
         relativePos++;
         while (relativePos < len
                && !attributes[relativePos].whiteSpace
-               && !engine->atWordSeparator(relativePos))
+               && !engine->atWordSeparator(relativePos)
+               && (attributes[relativePos-1].lineBreakType != QCharAttributes::Break))
             relativePos++;
 
         newPosition = blockIt.position() + relativePos;
