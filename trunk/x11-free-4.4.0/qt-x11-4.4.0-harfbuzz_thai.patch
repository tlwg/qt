diff -Nur qt-x11-opensource-src-4.4.0.orig/src/3rdparty/harfbuzz/src/harfbuzz-shaper-all.cpp qt-x11-opensource-src-4.4.0/src/3rdparty/harfbuzz/src/harfbuzz-shaper-all.cpp
--- qt-x11-opensource-src-4.4.0.orig/src/3rdparty/harfbuzz/src/harfbuzz-shaper-all.cpp	2008-04-28 20:11:15.000000000 +0700
+++ qt-x11-opensource-src-4.4.0/src/3rdparty/harfbuzz/src/harfbuzz-shaper-all.cpp	2008-07-22 12:55:29.000000000 +0700
@@ -8,5 +8,6 @@
 #include "harfbuzz-arabic.c"
 #include "harfbuzz-hangul.c"
 #include "harfbuzz-myanmar.c"
+#include "harfbuzz-thai.c"
 }
 
diff -Nur qt-x11-opensource-src-4.4.0.orig/src/3rdparty/harfbuzz/src/harfbuzz-shaper.cpp qt-x11-opensource-src-4.4.0/src/3rdparty/harfbuzz/src/harfbuzz-shaper.cpp
--- qt-x11-opensource-src-4.4.0.orig/src/3rdparty/harfbuzz/src/harfbuzz-shaper.cpp	2008-04-28 20:11:15.000000000 +0700
+++ qt-x11-opensource-src-4.4.0/src/3rdparty/harfbuzz/src/harfbuzz-shaper.cpp	2008-08-08 09:09:50.000000000 +0700
@@ -570,8 +570,6 @@
     return true;
 }
 
-static HB_AttributeFunction thai_attributes = 0;
-
 const HB_ScriptEngine HB_ScriptEngines[] = {
     // Common
     { HB_BasicShape, 0},
@@ -610,7 +608,7 @@
     // Sinhala
     { HB_IndicShape, HB_IndicAttributes },
     // Thai
-    { HB_BasicShape, thai_attributes },
+    { HB_ThaiShape, HB_ThaiAttributes },
     // Lao
     { HB_BasicShape, 0 },
     // Tibetan
diff -Nur qt-x11-opensource-src-4.4.0.orig/src/3rdparty/harfbuzz/src/harfbuzz-shaper-private.h qt-x11-opensource-src-4.4.0/src/3rdparty/harfbuzz/src/harfbuzz-shaper-private.h
--- qt-x11-opensource-src-4.4.0.orig/src/3rdparty/harfbuzz/src/harfbuzz-shaper-private.h	2008-04-28 20:11:15.000000000 +0700
+++ qt-x11-opensource-src-4.4.0/src/3rdparty/harfbuzz/src/harfbuzz-shaper-private.h	2008-07-30 09:52:01.000000000 +0700
@@ -92,6 +92,7 @@
 extern HB_Bool HB_MyanmarShape(HB_ShaperItem *shaper_item);
 extern HB_Bool HB_KhmerShape(HB_ShaperItem *shaper_item);
 extern HB_Bool HB_IndicShape(HB_ShaperItem *shaper_item);
+extern HB_Bool HB_ThaiShape(HB_ShaperItem *shaper_item);
 
 extern void HB_TibetanAttributes(HB_Script script, const HB_UChar16 *string, hb_uint32 from, hb_uint32 len, HB_CharAttributes *attributes);
 
@@ -101,6 +102,8 @@
 
 extern void HB_IndicAttributes(HB_Script script, const HB_UChar16 *string, hb_uint32 from, hb_uint32 len, HB_CharAttributes *attributes);
 
+extern void HB_ThaiAttributes (HB_Script script, const HB_UChar16 *string, hb_uint32 from, hb_uint32 len, HB_CharAttributes *attributes);
+
 typedef struct {
     hb_uint32 tag;
     hb_uint32 property;
diff -Nur qt-x11-opensource-src-4.4.0.orig/src/3rdparty/harfbuzz/src/harfbuzz-thai.c qt-x11-opensource-src-4.4.0/src/3rdparty/harfbuzz/src/harfbuzz-thai.c
--- qt-x11-opensource-src-4.4.0.orig/src/3rdparty/harfbuzz/src/harfbuzz-thai.c	1970-01-01 07:00:00.000000000 +0700
+++ qt-x11-opensource-src-4.4.0/src/3rdparty/harfbuzz/src/harfbuzz-thai.c	2008-08-07 23:56:28.000000000 +0700
@@ -0,0 +1,521 @@
+/*
+ * Copyright (C) 2007  Trolltech ASA
+ *
+ * This is part of HarfBuzz, an OpenType Layout engine library.
+ *
+ * Copyright (C) 2008 Thanomsub Noppaburana <donga.nb@gmail.com>
+ * Copyright (C) 2007 Jakkapun Kwanroengjai <jakkapun@mm.co.th>
+ * Copyright (C) 2003 Pattara Kiatisevi <pattara-list@mm.co.th>
+ * Copyright (C) 2003 Theppitak Karoonboonyanan <thep@linux.thai.net>
+ *
+ * Permission is hereby granted, without written agreement and without
+ * license or royalty fees, to use, copy, modify, and distribute this
+ * software and its documentation for any purpose, provided that the
+ * above copyright notice and the following two paragraphs appear in
+ * all copies of this software.
+ *
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR
+ * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
+ * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN
+ * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
+ * DAMAGE.
+ *
+ * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,
+ * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
+ * ON AN "AS IS" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO
+ * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
+ */
+
+#include "harfbuzz-shaper.h"
+#include "harfbuzz-shaper-private.h"
+#include <assert.h>
+#include <dlfcn.h>
+#include <signal.h>
+#include <stdio.h>
+
+#ifdef HAVE_LIBTHAI
+#include <thai/thrend.h>
+#include <thai/thcell.h>
+#include <thai/thwchar.h>
+#include <thai/thbrk.h>
+#include <thai/thctype.h>
+#endif
+
+#define ucs2tis(wc)     (((wc) - 0x0E00 + 0x20)^0x80)
+
+static HB_UChar32 HB_getChar (const HB_UChar16 *string, hb_uint32 length, hb_uint32 &i);
+
+
+#ifndef HAVE_LIBTHAI
+/*
+ * ---------------------------------------------------------------------------
+ * Libthai related
+ * ---------------------------------------------------------------------------
+ */
+#define LIBTHAI_MAJOR_0 "libthai.so.0"
+
+/*
+ * UGLY CODE!!! redefines cause not linked with libthai directly
+ * if ibthai changed please updated these ugly code too.
+ */
+struct thcell_t {
+    unsigned char base;      /**< base character */
+    unsigned char hilo;      /**< upper/lower vowel/diacritic */
+    unsigned char top;       /**< top-level mark */
+};
+typedef int (*th_brk_def) (const unsigned char*, int*, size_t);
+typedef int (*th_render_cell_tis_def) (struct thcell_t cell, unsigned char res[], size_t res_sz, int is_decomp_am);
+typedef int (*th_render_cell_win_def) (struct thcell_t cell, unsigned char res[], size_t res_sz, int is_decomp_am);
+typedef int (*th_render_cell_mac_def) (struct thcell_t cell, unsigned char res[], size_t res_sz, int is_decomp_am);
+typedef size_t (*th_next_cell_def) (const unsigned char *, size_t, struct thcell_t *, int);
+
+/* libthai library handle */
+void *libthai_handle = NULL;
+
+/* libthai releated function handles */
+static th_brk_def              th_brk = NULL;
+static th_next_cell_def        th_next_cell = NULL;
+static th_render_cell_tis_def  th_render_cell_tis = NULL;
+static th_render_cell_win_def  th_render_cell_win = NULL;
+static th_render_cell_mac_def  th_render_cell_mac = NULL;
+
+static int init_libthai ();
+
+/* signal handling vars */
+static int is_inst_signal = false;
+volatile sig_atomic_t fatal_error_in_progress = 0;
+
+/*
+ * ---------------------------------------------------------------------------
+ * Utilities
+ * ---------------------------------------------------------------------------
+ */
+
+void hbthai_on_program_exit ()
+{
+    if (libthai_handle) {
+        dlclose (libthai_handle);
+        th_brk = NULL;
+        th_next_cell = NULL;
+        th_render_cell_tis = NULL;
+        th_render_cell_win = NULL;
+        th_render_cell_mac = NULL;
+        libthai_handle = NULL;
+
+        signal (SIGINT,  SIG_DFL);
+        signal (SIGTERM, SIG_DFL);
+        signal (SIGQUIT, SIG_DFL);
+        signal (SIGSEGV, SIG_DFL);
+        signal (SIGILL,  SIG_DFL);
+        signal (SIGKILL, SIG_DFL);
+        signal (SIGFPE,  SIG_DFL);
+        signal (SIGBUS,  SIG_DFL);
+        signal (SIGABRT, SIG_DFL);
+        signal (SIGHUP,  SIG_DFL);
+
+        is_inst_signal = false;
+
+        printf ("\nLIBTHAI unloaded ... \n");
+    }
+}
+
+/* signal handling */
+void hbthai_sig_handling(int signum)
+{
+    if (fatal_error_in_progress)
+        raise (signum);
+    fatal_error_in_progress = 1;
+
+    /* do the clean up actions */
+    hbthai_on_program_exit ();
+
+    signal (signum, SIG_DFL);
+    raise (signum);
+}
+
+static int init_libthai ()
+{
+    if (!libthai_handle) {
+        /* open libthai library */
+        libthai_handle = dlopen(LIBTHAI_MAJOR_0, RTLD_NOW);
+        if (libthai_handle) {
+            printf("\nLIBTHAI loaded ...\n");
+            dlerror ();
+            th_brk = (th_brk_def) dlsym (libthai_handle, "th_brk");
+            th_next_cell = (th_next_cell_def) dlsym (libthai_handle, "th_next_cell");
+            th_render_cell_tis = (th_render_cell_win_def) dlsym (libthai_handle, "th_render_cell_tis");
+            th_render_cell_win = (th_render_cell_win_def) dlsym (libthai_handle, "th_render_cell_win");
+            th_render_cell_mac = (th_render_cell_win_def) dlsym (libthai_handle, "th_render_cell_mac");
+
+            /* trap exiting of program for unload libthai */
+            atexit (hbthai_on_program_exit);
+
+            /* install signal handler for trap any signals */
+            if (!is_inst_signal) {
+                if (signal (SIGINT,  hbthai_sig_handling) == SIG_IGN)
+                    signal (SIGINT, SIG_IGN);
+                if (signal (SIGTERM, hbthai_sig_handling) == SIG_IGN)
+                    signal (SIGTERM, SIG_IGN);
+                if (signal (SIGQUIT, hbthai_sig_handling) == SIG_IGN)
+                    signal (SIGQUIT, SIG_IGN);
+                if (signal (SIGSEGV, hbthai_sig_handling) == SIG_IGN)
+                    signal (SIGSEGV, SIG_IGN);
+                if (signal (SIGILL,  hbthai_sig_handling) == SIG_IGN)
+                    signal (SIGILL, SIG_IGN);
+                if (signal (SIGKILL, hbthai_sig_handling) == SIG_IGN)
+                    signal (SIGKILL, SIG_IGN);
+                if (signal (SIGFPE,  hbthai_sig_handling) == SIG_IGN)
+                    signal (SIGFPE, SIG_IGN);
+                if (signal (SIGBUS,  hbthai_sig_handling) == SIG_IGN)
+                    signal (SIGBUS, SIG_IGN);
+                if (signal (SIGABRT, hbthai_sig_handling) == SIG_IGN)
+                    signal (SIGABRT, SIG_IGN);
+                if (signal (SIGHUP,  hbthai_sig_handling) == SIG_IGN)
+                    signal (SIGHUP, SIG_IGN);
+
+                is_inst_signal = true;
+            }
+
+        }
+        else
+            printf("\nCan't load libthai ... :-(\n");
+    }
+    return (libthai_handle != NULL);
+}
+#endif /* ifndef HAVE_LIBTHAI */
+
+/* getChar - Taken from scribus project */
+static HB_UChar32 HB_getChar (const HB_UChar16 *string, hb_uint32 length, hb_uint32 &i)
+{
+    HB_UChar32 ch;
+    if (HB_IsHighSurrogate(string[i])
+        && i < length - 1
+        && HB_IsLowSurrogate(string[i + 1]))
+    {
+        ch = HB_SurrogateToUcs4(string[i], string[i + 1]);
+        ++i;
+    }
+    else {
+        ch = string[i];
+    }
+    return ch;
+}
+
+/*
+ * ---------------------------------------------------------------------------
+ * Thai Shaper / Attributes
+ * ---------------------------------------------------------------------------
+ */
+
+/*
+ * USe basic_features prepare for future adding.
+ */
+#ifndef NO_OPENTYPE
+static const HB_OpenTypeFeature thai_features[] = {
+    { HB_MAKE_TAG('c', 'c', 'm', 'p'), CcmpProperty },
+    { HB_MAKE_TAG('l', 'i', 'g', 'a'), CcmpProperty },
+    { HB_MAKE_TAG('c', 'l', 'i', 'g'), CcmpProperty },
+    {0, 0}
+};
+#endif
+
+/* TIS-to-Unicode glyph maps for characters 0x80-0xff */
+static int tis620_0[128] = {
+    /**/ 0,      0,      0,      0,      0,      0,      0,      0,
+    /**/ 0,      0,      0,      0,      0,      0,      0,      0,
+    /**/ 0,      0,      0,      0,      0,      0,      0,      0,
+    /**/ 0,      0,      0,      0,      0,      0,      0,      0,
+    0x0020, 0x0e01, 0x0e02, 0x0e03, 0x0e04, 0x0e05, 0x0e06, 0x0e07,
+    0x0e08, 0x0e09, 0x0e0a, 0x0e0b, 0x0e0c, 0x0e0d, 0x0e0e, 0x0e0f,
+    0x0e10, 0x0e11, 0x0e12, 0x0e13, 0x0e14, 0x0e15, 0x0e16, 0x0e17,
+    0x0e18, 0x0e19, 0x0e1a, 0x0e1b, 0x0e1c, 0x0e1d, 0x0e1e, 0x0e1f,
+    0x0e20, 0x0e21, 0x0e22, 0x0e23, 0x0e24, 0x0e25, 0x0e26, 0x0e27,
+    0x0e28, 0x0e29, 0x0e2a, 0x0e2b, 0x0e2c, 0x0e2d, 0x0e2e, 0x0e2f,
+    0x0e30, 0x0e31, 0x0e32, 0x0e33, 0x0e34, 0x0e35, 0x0e36, 0x0e37,
+    0x0e38, 0x0e39, 0x0e3a,      0,      0,      0,      0, 0x0e3f,
+    0x0e40, 0x0e41, 0x0e42, 0x0e43, 0x0e44, 0x0e45, 0x0e46, 0x0e47,
+    0x0e48, 0x0e49, 0x0e4a, 0x0e4b, 0x0e4c, 0x0e4d, 0x0e4e, 0x0e4f,
+    0x0e50, 0x0e51, 0x0e52, 0x0e53, 0x0e54, 0x0e55, 0x0e56, 0x0e57,
+    0x0e58, 0x0e59, 0x0e5a, 0x0e5b,      0,      0,      0,      0
+};
+
+static int tis620_1[128] = {
+    0xf89e,      0,      0, 0xf88c, 0xf88f, 0xf892, 0xf895, 0xf898,
+    0xf88b, 0xf88e, 0xf891, 0xf894, 0xf897,      0,      0, 0xf899,
+    0xf89a,      0, 0xf884, 0xf889, 0xf885, 0xf886, 0xf887, 0xf888,
+    0xf88a, 0xf88d, 0xf890, 0xf893, 0xf896,      0,      0,      0,
+    /**/ 0, 0x0e01, 0x0e02, 0x0e03, 0x0e04, 0x0e05, 0x0e06, 0x0e07,
+    0x0e08, 0x0e09, 0x0e0a, 0x0e0b, 0x0e0c, 0x0e0d, 0x0e0e, 0x0e0f,
+    0x0e10, 0x0e11, 0x0e12, 0x0e13, 0x0e14, 0x0e15, 0x0e16, 0x0e17,
+    0x0e18, 0x0e19, 0x0e1a, 0x0e1b, 0x0e1c, 0x0e1d, 0x0e1e, 0x0e1f,
+    0x0e20, 0x0e21, 0x0e22, 0x0e23, 0x0e24, 0x0e25, 0x0e26, 0x0e27,
+    0x0e28, 0x0e29, 0x0e2a, 0x0e2b, 0x0e2c, 0x0e2d, 0x0e2e, 0x0e2f,
+    0x0e30, 0x0e31, 0x0e32, 0x0e33, 0x0e34, 0x0e35, 0x0e36, 0x0e37,
+    0x0e38, 0x0e39, 0x0e3a,      0,      0,      0,      0, 0x0e3f,
+    0x0e40, 0x0e41, 0x0e42, 0x0e43, 0x0e44, 0x0e45, 0x0e46, 0x0e47,
+    0x0e48, 0x0e49, 0x0e4a, 0x0e4b, 0x0e4c, 0x0e4d,      0, 0x0e4f,
+    0x0e50, 0x0e51, 0x0e52, 0x0e53, 0x0e54, 0x0e55, 0x0e56, 0x0e57,
+    0x0e58, 0x0e59,      0,      0, 0xf89b, 0xf89c, 0xf89d,      0
+};
+
+static int tis620_2[128] = {
+    0xf700, 0xf701, 0xf702, 0xf703, 0xf704, 0x2026, 0xf705, 0xf706,
+    0xf707, 0xf708, 0xf709, 0xf70a, 0xf70b, 0xf70c, 0xf70d, 0xf70e,
+    0xf70f, 0x2018, 0x2019, 0x201c, 0x201d, 0x2022, 0x2013, 0x2014,
+    0xf710, 0xf711, 0xf712, 0xf713, 0xf714, 0xf715, 0xf716, 0xf717,
+    0x00a0, 0x0e01, 0x0e02, 0x0e03, 0x0e04, 0x0e05, 0x0e06, 0x0e07,
+    0x0e08, 0x0e09, 0x0e0a, 0x0e0b, 0x0e0c, 0x0e0d, 0x0e0e, 0x0e0f,
+    0x0e10, 0x0e11, 0x0e12, 0x0e13, 0x0e14, 0x0e15, 0x0e16, 0x0e17,
+    0x0e18, 0x0e19, 0x0e1a, 0x0e1b, 0x0e1c, 0x0e1d, 0x0e1e, 0x0e1f,
+    0x0e20, 0x0e21, 0x0e22, 0x0e23, 0x0e24, 0x0e25, 0x0e26, 0x0e27,
+    0x0e28, 0x0e29, 0x0e2a, 0x0e2b, 0x0e2c, 0x0e2d, 0x0e2e, 0x0e2f,
+    0x0e30, 0x0e31, 0x0e32, 0x0e33, 0x0e34, 0x0e35, 0x0e36, 0x0e37,
+    0x0e38, 0x0e39, 0x0e3a,      0,      0,      0,      0, 0x0e3f,
+    0x0e40, 0x0e41, 0x0e42, 0x0e43, 0x0e44, 0x0e45, 0x0e46, 0x0e47,
+    0x0e48, 0x0e49, 0x0e4a, 0x0e4b, 0x0e4c, 0x0e4d, 0x0e4e, 0x0e4f,
+    0x0e50, 0x0e51, 0x0e52, 0x0e53, 0x0e54, 0x0e55, 0x0e56, 0x0e57,
+    0x0e58, 0x0e59, 0x0e5a, 0x0e5b, 0xf718, 0xf719, 0xf71a,      0
+};
+
+enum ThaiFontType {
+    TIS,
+    WIN,
+    MAC,
+};
+
+static int thai_get_glyph_index (ThaiFontType font_type, unsigned char c)
+{
+    switch (font_type){
+        case TIS: return (c & 0x80) ? tis620_0[c & 0x7f] : c;
+        case WIN: return (c & 0x80) ? tis620_1[c & 0x7f] : c;
+        case MAC: return (c & 0x80) ? tis620_2[c & 0x7f] : c;
+        default:  return 0;
+    }
+}
+
+static int thai_contain_glyphs (HB_ShaperItem *shaper_item, const int glyph_map[128])
+{
+    unsigned char c;
+
+    for (c = 0; c < 0x80; c++) {
+        if ( glyph_map[c] ) {
+            if ( !shaper_item->font->klass->canRender (shaper_item->font, (HB_UChar16 *) &glyph_map[c], 1) )
+                return 0;
+        }
+    }
+    return 1;
+}
+
+static ThaiFontType getThaiFontType(HB_ShaperItem *shaper_item)
+{
+    if ( thai_contain_glyphs (shaper_item, tis620_2) )
+        return MAC;
+    else if ( thai_contain_glyphs (shaper_item, tis620_1) )
+        return WIN;
+    else
+        return TIS;
+}
+
+/*static uint thaiFontTypeUDataID()
+{
+    static uint thaiFontTypeUDataID = QFontEngine::registerUserData();
+    return thaiFontTypeUDataID;
+}*/
+
+/*
+ * convert to the correct display level of THAI vowels and marks.
+ */
+static HB_Bool HB_ThaiConvertStringToGlyphIndices (HB_ShaperItem *item)
+{
+    /* Get font type first */
+    ThaiFontType font_type = getThaiFontType (item);
+
+    const HB_UChar16 *uc = item->string + item->item.pos;
+    const hb_uint32 length = item->item.length;
+    unsigned short *logClusters = item->log_clusters;
+
+    hb_uint32 i = 0, slen = 0;
+    unsigned char tis_text[length + 1];
+
+    HB_Bool isFixedPitch = false; /* FIXME waiting for check */
+
+    /* translate input string to tis */
+    for (hb_uint32 idx = 0; idx < length; ++idx) {
+        tis_text[idx] = (unsigned char) ucs2tis ( HB_getChar (uc, length, idx) );
+    }
+    tis_text[length] = '\0';
+
+    /* allocate temporary glyphs buffers */
+    HB_STACKARRAY (HB_UChar16, glyphString, (item->item.length * 1.5));
+
+    while (i < item->item.length) {
+        struct thcell_t tis_cell;
+        unsigned char rglyphs[4];
+        int cell_length;
+        int lgn = 0;
+        HB_Bool haveSaraAm = false;
+
+        cell_length = th_next_cell (tis_text + i, length - i, &tis_cell, !isFixedPitch);
+        haveSaraAm  = (tis_text[i + cell_length - 1] == 0xd3);
+
+        /* set shaper item's log_clusters */
+        logClusters[i] = slen;
+        for (int j = 1; j < cell_length; j++) {
+            logClusters[i + j] = logClusters[i];
+        }
+
+        /* Find Logical Glyphs by font type */
+        switch (font_type) {
+            case TIS: lgn = th_render_cell_tis (tis_cell, rglyphs, sizeof(rglyphs) / sizeof(rglyphs[0]), true); break;
+            case WIN: lgn = th_render_cell_mac (tis_cell, rglyphs, sizeof(rglyphs) / sizeof(rglyphs[0]), true); break;
+            case MAC: lgn = th_render_cell_win (tis_cell, rglyphs, sizeof(rglyphs) / sizeof(rglyphs[0]), true); break;
+        }
+
+        /* Add glyphs to glyphs string and setting some attributes */
+        for (int lgi = 0; lgi < lgn; lgi++) {
+            HB_UChar16 ch;
+            if ( rglyphs[lgi] == 0xdd/*TH_BLANK_BASE_GLYPH*/ ) { /*if ( !isFixedPitch )*/
+                ch = glyphString[slen++] = C_DOTTED_CIRCLE;
+                item->attributes[slen-1].dontPrint = true; /* FIXME : waiting for correct this */
+            }
+            else {
+                ch = glyphString[slen++] = (HB_UChar16) thai_get_glyph_index (font_type, rglyphs[lgi]);
+            }
+        }
+
+        if (haveSaraAm) {
+            logClusters[i + cell_length - 1] = slen - 2;
+            if (tis_cell.top != 0)
+                logClusters[i + cell_length - 1]--;
+        }
+
+        i += cell_length;
+    }
+    glyphString[slen] = (HB_UChar16) '\0';
+
+    /* for check, should reallocate space or not */
+    HB_Bool spaceOK = (item->num_glyphs >= slen);
+
+    /* Convert to Glyph indeices */
+    HB_Bool haveGlyphs = item->font->klass->convertStringToGlyphIndices (
+                                          item->font,
+                                          glyphString, slen,
+                                          item->glyphs, &item->num_glyphs,
+                                          item->shaperFlags);
+
+    HB_FREE_STACKARRAY (glyphString);
+
+    if (!haveGlyphs || !spaceOK) {
+        return false;
+    }
+    return haveGlyphs;
+}
+
+/*
+ * set the glyph attributes heuristically.
+ */
+static void HB_ThaiHeuristicSetGlyphAttributes (HB_ShaperItem *item)
+{
+    /* Set Glyph Attributes */
+    hb_uint32 iCluster = 0;
+    hb_uint32 length = item->item.length;
+    while (iCluster < length) {
+        int cluster_start = item->log_clusters[iCluster];
+        ++iCluster;
+        while (iCluster < length && item->log_clusters[iCluster] == cluster_start) {
+            ++iCluster;
+        }
+        int cluster_end = (iCluster < length) ? item->log_clusters[iCluster] : item->num_glyphs;
+        item->attributes[cluster_start].clusterStart = true;
+        for (int i = cluster_start + 1; i < cluster_end; i++) {
+            item->attributes[i].clusterStart = false;
+        }
+    }
+}
+
+/*
+ * THAI Shaping.
+ */
+HB_Bool HB_ThaiShape (HB_ShaperItem *item)
+{
+#ifndef HAVE_LIBTHAI
+    /* Initial Libthai and related function(s) */
+    if ( !init_libthai () )
+        return HB_BasicShape (item);
+#endif
+
+    if ( !HB_ThaiConvertStringToGlyphIndices (item) )
+        return false;
+
+    HB_ThaiHeuristicSetGlyphAttributes (item);
+
+#ifndef NO_OPENTYPE
+    const int availableGlyphs = item->num_glyphs;
+    if ( HB_SelectScript (item, basic_features) ) {
+        HB_OpenTypeShape (item, /*properties*/0);
+        return HB_OpenTypePosition (item, availableGlyphs, /*doLogClusters*/false);
+    }
+#endif
+
+    HB_HeuristicPosition (item);
+    return true;
+}
+
+/*
+ * computes Word Boundary and Char stop for THAI.
+ */
+void HB_ThaiAttributes (HB_Script /*script*/, const HB_UChar16 *string, hb_uint32 from, hb_uint32 len, HB_CharAttributes *attributes)
+{
+#ifndef HAVE_LIBTHAI
+    /* Initial Libthai and related function(s) */
+    if ( !init_libthai () )
+        return;
+#endif
+
+    unsigned char tis_text[len + 1];
+    struct thcell_t tis_cell;
+    hb_uint32 brk_n, i, j, cell_length;
+    int *brk_pnts = NULL;
+    const HB_UChar16 *uc = string + from;
+    attributes += from;
+
+    /* translate string to tis */
+    for (hb_uint32 idx = 0; idx < len; ++idx) {
+        tis_text[idx] = (unsigned char) ucs2tis ( HB_getChar (uc, len, idx) );
+        attributes[idx].lineBreakType = HB_NoBreak;
+        attributes[idx].wordBoundary = false;
+    }
+    tis_text[len] = '\0';
+
+    brk_pnts = (int*) malloc (sizeof(int) * len);
+    if (brk_pnts) {
+        memset (brk_pnts, 0, sizeof(int) * len);
+
+        /* manage word break positions */
+        brk_n = th_brk ( (const unsigned char*) tis_text, brk_pnts, len );
+        for (i = 0; i < brk_n; i++) {
+            if (brk_pnts[i] > 0) {
+                attributes[brk_pnts[i]-1].lineBreakType = HB_SoftHyphen;
+                attributes[brk_pnts[i]-1].wordBoundary = true;
+            }
+        }
+        free (brk_pnts);
+    }
+
+    /* manage charStop */
+    i = 0;
+    while (i < len) {
+        cell_length = th_next_cell ( (const unsigned char*) tis_text + i, len - i, &tis_cell, true );
+
+        attributes[i].charStop = true;
+        for(j = 1; j < cell_length; j++)
+            attributes[i + j].charStop = false;
+
+        /* Set charStop for SARA AM */
+        if (tis_text[i + cell_length - 1] == 0xd3)
+            attributes[i + cell_length - 1].charStop = true;
+
+        i += cell_length;
+    }
+}
diff -Nur qt-x11-opensource-src-4.4.0.orig/src/3rdparty/harfbuzz/src/harfbuzz-thai.cpp qt-x11-opensource-src-4.4.0/src/3rdparty/harfbuzz/src/harfbuzz-thai.cpp
--- qt-x11-opensource-src-4.4.0.orig/src/3rdparty/harfbuzz/src/harfbuzz-thai.cpp	2008-04-28 20:11:15.000000000 +0700
+++ qt-x11-opensource-src-4.4.0/src/3rdparty/harfbuzz/src/harfbuzz-thai.cpp	1970-01-01 07:00:00.000000000 +0700
@@ -1,71 +0,0 @@
-/*******************************************************************
- *
- *  Copyright 2007  Trolltech ASA
- *
- *  This is part of HarfBuzz, an OpenType Layout engine library.
- *
- *  See the file name COPYING for licensing information.
- *
- ******************************************************************/
-
-#if 0
-#include <qtextcodec.h>
-#include <qlibrary.h>
-
-
-static void thaiWordBreaks(const QChar *string, const int len, QCharAttributes *attributes)
-{
-#ifdef QT_NO_TEXTCODEC
-    Q_UNUSED(string);
-    Q_UNUSED(len);
-    Q_UNUSED(attributes);
-#else
-    typedef int (*th_brk_def)(const char*, int[], int);
-    static QTextCodec *thaiCodec = QTextCodec::codecForMib(2259);
-    static th_brk_def th_brk = 0;
-
-#ifndef QT_NO_LIBRARY
-    /* load libthai dynamically */
-    if (!th_brk && thaiCodec) {
-        th_brk = (th_brk_def)QLibrary::resolve(QLatin1String("thai"), "th_brk");
-        if (!th_brk)
-            thaiCodec = 0;
-    }
-#endif
-
-    if (!th_brk)
-        return;
-
-    QByteArray cstr = thaiCodec->fromUnicode(QString(string, len));
-
-    int brp[128];
-    int *break_positions = brp;
-    int numbreaks = th_brk(cstr.constData(), break_positions, 128);
-    if (numbreaks > 128) {
-        break_positions = new int[numbreaks];
-        numbreaks = th_brk(cstr.data(),break_positions, numbreaks);
-    }
-
-    for (int i = 0; i < len - 1; ++i)
-        attributes[i].lineBreakType = QCharAttributes::NoBreak;
-
-    for (int i = 0; i < numbreaks; ++i) {
-        if (break_positions[i] > 0)
-            attributes[break_positions[i]-1].lineBreakType = QCharAttributes::Break;
-    }
-
-    if (break_positions != brp)
-        delete [] break_positions;
-#endif // QT_NO_TEXTCODEC
-}
-
-
-static void thai_attributes( int script, const QString &text, int from, int len, QCharAttributes *attributes )
-{
-    Q_UNUSED(script);
-    Q_ASSERT(script == QUnicodeTables::Thai);
-    thaiWordBreaks(text.unicode() + from, len, attributes);
-}
-
-
-#endif
diff -Nur qt-x11-opensource-src-4.4.0.orig/src/3rdparty/harfbuzz/src/Makefile.am qt-x11-opensource-src-4.4.0/src/3rdparty/harfbuzz/src/Makefile.am
--- qt-x11-opensource-src-4.4.0.orig/src/3rdparty/harfbuzz/src/Makefile.am	2008-04-28 20:11:15.000000000 +0700
+++ qt-x11-opensource-src-4.4.0/src/3rdparty/harfbuzz/src/Makefile.am	2008-07-22 12:54:59.000000000 +0700
@@ -18,7 +18,8 @@
 	harfbuzz-hebrew.c \
 	harfbuzz-arabic.c \
 	harfbuzz-hangul.c \
-	harfbuzz-myanmar.c
+	harfbuzz-myanmar.c \
+	harfbuzz-thai.c
 
 EXTRA_SOURCES = harfbuzz.c
 
